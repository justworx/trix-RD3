
I'm finding that config is getting out of control. There's so so so
much to configure, both defaults and customizations. I'm spending
way too much time on it; fighting inconsistency; always chasing down
errors; config files are scattered...

Maybe what's needed is a consistent configuration scheme.

I'm going to splat out a bunch of ideas to think about. Maybe some
kind of plan will form in my head.

IDEASPLATTER:

* The end result must be one huge (probably tgz's) default config
  file shipped with each version.
* On first call for config, it can be unpacked and loaded into a
  new database in ... either .cache or .config (i'm not sure such a 
  database belongs in .config - i'm not very clear on the linux way
  of deciding that).
* Once the config db is there, it can be edited by Console, app.cline,
  and any other user interfaces that may come into existence.
* Any given config record can be reset to default at any time.

* DETAILS:
  --> I'm not sure what config db records should consist of:
      key / json-blobs probably.


KEYS
 - config-name        # package.module-path.class string
   - config-section   # human-understandable section
     - config-item    # name of the config
... no, this doesn't really match the DB way of doing things.
... maybe a "tags" table?
--- THINK ABOUT THIS!



QUESTION:
I'm building an app that will come with a default config file, but
will require a lot of configuration-edits by the user. Where should
the config file containing edits of the default config be placed -
in ~/.config or ~/.cache?

<ayecee> .cache should contains things that, if you deleted them, 
         would not change the behavior of the program
<djph>   /etc/yourprog/config.conf
<ayecee> that they'd be recreated or redownloaded
<djph>   then if $HOME/.config/yourprog.conf exists, use that.


By that logic, could:
 1) ignore /etc/trix since it requires sudo 
 2) place the default config in ~/.config/trix/default.conf
 3) generate a database ~/.config/trix/config.db

